// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// marcox_iter_ar1Cpp
List marcox_iter_ar1Cpp(const Eigen::Map<Eigen::MatrixXd>& X1, Eigen::Map<Eigen::VectorXd> betainit, Eigen::Map<Eigen::VectorXd> Lambda, const NumericVector& c1, const NumericMatrix& W1, const NumericVector& id, const IntegerVector& new_uid, const IntegerVector& n, const double tol, const int maxIter, const int maxInner, double pphi, double rho);
RcppExport SEXP _marcox_marcox_iter_ar1Cpp(SEXP X1SEXP, SEXP betainitSEXP, SEXP LambdaSEXP, SEXP c1SEXP, SEXP W1SEXP, SEXP idSEXP, SEXP new_uidSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxIterSEXP, SEXP maxInnerSEXP, SEXP pphiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type maxInner(maxInnerSEXP);
    Rcpp::traits::input_parameter< double >::type pphi(pphiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(marcox_iter_ar1Cpp(X1, betainit, Lambda, c1, W1, id, new_uid, n, tol, maxIter, maxInner, pphi, rho));
    return rcpp_result_gen;
END_RCPP
}
// marcox_iter_excCpp
List marcox_iter_excCpp(const Eigen::Map<Eigen::MatrixXd>& X1, Eigen::Map<Eigen::VectorXd> betainit, Eigen::Map<Eigen::VectorXd> Lambda, const NumericVector& c1, const NumericMatrix& W1, const NumericVector& id, const IntegerVector& new_uid, const IntegerVector& n, const double tol, const int maxIter, const int maxInner, double pphi, double rho);
RcppExport SEXP _marcox_marcox_iter_excCpp(SEXP X1SEXP, SEXP betainitSEXP, SEXP LambdaSEXP, SEXP c1SEXP, SEXP W1SEXP, SEXP idSEXP, SEXP new_uidSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxIterSEXP, SEXP maxInnerSEXP, SEXP pphiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type maxInner(maxInnerSEXP);
    Rcpp::traits::input_parameter< double >::type pphi(pphiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(marcox_iter_excCpp(X1, betainit, Lambda, c1, W1, id, new_uid, n, tol, maxIter, maxInner, pphi, rho));
    return rcpp_result_gen;
END_RCPP
}
// marcox_iter_indpCpp
List marcox_iter_indpCpp(const Eigen::Map<Eigen::MatrixXd>& X1, Eigen::Map<Eigen::VectorXd> betainit, Eigen::Map<Eigen::VectorXd> Lambda, const NumericVector& c1, const NumericMatrix& W1, const NumericVector& id, const IntegerVector& new_uid, const IntegerVector& n, const double tol, const int maxIter, const int maxInner, double pphi, double rho);
RcppExport SEXP _marcox_marcox_iter_indpCpp(SEXP X1SEXP, SEXP betainitSEXP, SEXP LambdaSEXP, SEXP c1SEXP, SEXP W1SEXP, SEXP idSEXP, SEXP new_uidSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxIterSEXP, SEXP maxInnerSEXP, SEXP pphiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type maxInner(maxInnerSEXP);
    Rcpp::traits::input_parameter< double >::type pphi(pphiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(marcox_iter_indpCpp(X1, betainit, Lambda, c1, W1, id, new_uid, n, tol, maxIter, maxInner, pphi, rho));
    return rcpp_result_gen;
END_RCPP
}
// marcox_iter_kdCpp
List marcox_iter_kdCpp(const Eigen::Map<Eigen::MatrixXd>& X1, Eigen::Map<Eigen::VectorXd> betainit, Eigen::Map<Eigen::VectorXd> Lambda, const NumericVector& c1, const NumericMatrix& W1, const NumericVector& id, const IntegerVector& new_uid, const IntegerVector& n, const double tol, const int maxIter, const int maxInner, double pphi, Eigen::Map<Eigen::VectorXd> rho, const int& kv);
RcppExport SEXP _marcox_marcox_iter_kdCpp(SEXP X1SEXP, SEXP betainitSEXP, SEXP LambdaSEXP, SEXP c1SEXP, SEXP W1SEXP, SEXP idSEXP, SEXP new_uidSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxIterSEXP, SEXP maxInnerSEXP, SEXP pphiSEXP, SEXP rhoSEXP, SEXP kvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type maxInner(maxInnerSEXP);
    Rcpp::traits::input_parameter< double >::type pphi(pphiSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type kv(kvSEXP);
    rcpp_result_gen = Rcpp::wrap(marcox_iter_kdCpp(X1, betainit, Lambda, c1, W1, id, new_uid, n, tol, maxIter, maxInner, pphi, rho, kv));
    return rcpp_result_gen;
END_RCPP
}
// marcox_iter_toepCpp
List marcox_iter_toepCpp(const Eigen::Map<Eigen::MatrixXd>& X1, Eigen::Map<Eigen::VectorXd> betainit, Eigen::Map<Eigen::VectorXd> Lambda, const NumericVector& c1, const NumericMatrix& W1, const NumericVector& id, const IntegerVector& new_uid, const IntegerVector& n, const double tol, const int maxIter, const int maxInner, double pphi, Eigen::Map<Eigen::VectorXd> rho);
RcppExport SEXP _marcox_marcox_iter_toepCpp(SEXP X1SEXP, SEXP betainitSEXP, SEXP LambdaSEXP, SEXP c1SEXP, SEXP W1SEXP, SEXP idSEXP, SEXP new_uidSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxIterSEXP, SEXP maxInnerSEXP, SEXP pphiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type maxInner(maxInnerSEXP);
    Rcpp::traits::input_parameter< double >::type pphi(pphiSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(marcox_iter_toepCpp(X1, betainit, Lambda, c1, W1, id, new_uid, n, tol, maxIter, maxInner, pphi, rho));
    return rcpp_result_gen;
END_RCPP
}
// marcox_iter_unsCpp
List marcox_iter_unsCpp(const Eigen::Map<Eigen::MatrixXd>& X1, Eigen::Map<Eigen::VectorXd> betainit, Eigen::Map<Eigen::VectorXd> Lambda, const NumericVector& c1, const NumericMatrix& W1, const NumericVector& id, const IntegerVector& new_uid, const IntegerVector& n, const double tol, const int maxIter, const int maxInner, double pphi, Eigen::Map<Eigen::MatrixXd> rho);
RcppExport SEXP _marcox_marcox_iter_unsCpp(SEXP X1SEXP, SEXP betainitSEXP, SEXP LambdaSEXP, SEXP c1SEXP, SEXP W1SEXP, SEXP idSEXP, SEXP new_uidSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxIterSEXP, SEXP maxInnerSEXP, SEXP pphiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type maxInner(maxInnerSEXP);
    Rcpp::traits::input_parameter< double >::type pphi(pphiSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(marcox_iter_unsCpp(X1, betainit, Lambda, c1, W1, id, new_uid, n, tol, maxIter, maxInner, pphi, rho));
    return rcpp_result_gen;
END_RCPP
}
// matSolCpp
SEXP matSolCpp(const Eigen::Map<Eigen::MatrixXd>& mat, const bool block, const int K, const IntegerVector& n, const double tol_cond);
RcppExport SEXP _marcox_matSolCpp(SEXP matSEXP, SEXP blockSEXP, SEXP KSEXP, SEXP nSEXP, SEXP tol_condSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const bool >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_cond(tol_condSEXP);
    rcpp_result_gen = Rcpp::wrap(matSolCpp(mat, block, K, n, tol_cond));
    return rcpp_result_gen;
END_RCPP
}
// sandwich_ar1_rcpp
SEXP sandwich_ar1_rcpp(double rho, double betascale, const Eigen::Map<Eigen::VectorXd>& betainit, const Eigen::Map<Eigen::VectorXd>& gSS, int kk, int covnum, int K, const IntegerVector& n, const IntegerVector& new_uid, const Eigen::Map<Eigen::MatrixXd>& xxx, const NumericVector& c1, const Eigen::Map<Eigen::VectorXd>& t2, const Eigen::Map<Eigen::VectorXd>& tt1, const Eigen::Map<Eigen::VectorXd>& gg1, const Eigen::Map<Eigen::VectorXd>& Lambda, const IntegerVector& id);
RcppExport SEXP _marcox_sandwich_ar1_rcpp(SEXP rhoSEXP, SEXP betascaleSEXP, SEXP betainitSEXP, SEXP gSSSEXP, SEXP kkSEXP, SEXP covnumSEXP, SEXP KSEXP, SEXP nSEXP, SEXP new_uidSEXP, SEXP xxxSEXP, SEXP c1SEXP, SEXP t2SEXP, SEXP tt1SEXP, SEXP gg1SEXP, SEXP LambdaSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type betascale(betascaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gSS(gSSSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< int >::type covnum(covnumSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xxx(xxxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type tt1(tt1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gg1(gg1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sandwich_ar1_rcpp(rho, betascale, betainit, gSS, kk, covnum, K, n, new_uid, xxx, c1, t2, tt1, gg1, Lambda, id));
    return rcpp_result_gen;
END_RCPP
}
// sandwich_exc_rcpp
SEXP sandwich_exc_rcpp(double rho, double betascale, const Eigen::Map<Eigen::VectorXd>& betainit, const Eigen::Map<Eigen::VectorXd>& gSS, int kk, int covnum, int K, const IntegerVector& n, const IntegerVector& new_uid, const Eigen::Map<Eigen::MatrixXd>& xxx, const NumericVector& c1, const Eigen::Map<Eigen::VectorXd>& t2, const Eigen::Map<Eigen::VectorXd>& tt1, const Eigen::Map<Eigen::VectorXd>& gg1, const Eigen::Map<Eigen::VectorXd>& Lambda, const IntegerVector& id);
RcppExport SEXP _marcox_sandwich_exc_rcpp(SEXP rhoSEXP, SEXP betascaleSEXP, SEXP betainitSEXP, SEXP gSSSEXP, SEXP kkSEXP, SEXP covnumSEXP, SEXP KSEXP, SEXP nSEXP, SEXP new_uidSEXP, SEXP xxxSEXP, SEXP c1SEXP, SEXP t2SEXP, SEXP tt1SEXP, SEXP gg1SEXP, SEXP LambdaSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type betascale(betascaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gSS(gSSSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< int >::type covnum(covnumSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xxx(xxxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type tt1(tt1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gg1(gg1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sandwich_exc_rcpp(rho, betascale, betainit, gSS, kk, covnum, K, n, new_uid, xxx, c1, t2, tt1, gg1, Lambda, id));
    return rcpp_result_gen;
END_RCPP
}
// sandwich_indp_rcpp
SEXP sandwich_indp_rcpp(double rho, double betascale, const Eigen::Map<Eigen::VectorXd>& betainit, const Eigen::Map<Eigen::VectorXd>& gSS, int kk, int covnum, int K, const IntegerVector& n, const IntegerVector& new_uid, const Eigen::Map<Eigen::MatrixXd>& xxx, const NumericVector& c1, const Eigen::Map<Eigen::VectorXd>& t2, const Eigen::Map<Eigen::VectorXd>& tt1, const Eigen::Map<Eigen::VectorXd>& gg1, const Eigen::Map<Eigen::VectorXd>& Lambda, const IntegerVector& id);
RcppExport SEXP _marcox_sandwich_indp_rcpp(SEXP rhoSEXP, SEXP betascaleSEXP, SEXP betainitSEXP, SEXP gSSSEXP, SEXP kkSEXP, SEXP covnumSEXP, SEXP KSEXP, SEXP nSEXP, SEXP new_uidSEXP, SEXP xxxSEXP, SEXP c1SEXP, SEXP t2SEXP, SEXP tt1SEXP, SEXP gg1SEXP, SEXP LambdaSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type betascale(betascaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gSS(gSSSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< int >::type covnum(covnumSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xxx(xxxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type tt1(tt1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gg1(gg1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sandwich_indp_rcpp(rho, betascale, betainit, gSS, kk, covnum, K, n, new_uid, xxx, c1, t2, tt1, gg1, Lambda, id));
    return rcpp_result_gen;
END_RCPP
}
// sandwich_kd_rcpp
SEXP sandwich_kd_rcpp(const NumericVector& rho, double betascale, const Eigen::Map<Eigen::VectorXd>& betainit, const Eigen::Map<Eigen::VectorXd>& gSS, int kk, int covnum, int K, const IntegerVector& n, const IntegerVector& new_uid, const Eigen::Map<Eigen::MatrixXd>& xxx, const NumericVector& c1, const Eigen::Map<Eigen::VectorXd>& t2, const Eigen::Map<Eigen::VectorXd>& tt1, const Eigen::Map<Eigen::VectorXd>& gg1, const Eigen::Map<Eigen::VectorXd>& Lambda, const IntegerVector& id, const int& kv);
RcppExport SEXP _marcox_sandwich_kd_rcpp(SEXP rhoSEXP, SEXP betascaleSEXP, SEXP betainitSEXP, SEXP gSSSEXP, SEXP kkSEXP, SEXP covnumSEXP, SEXP KSEXP, SEXP nSEXP, SEXP new_uidSEXP, SEXP xxxSEXP, SEXP c1SEXP, SEXP t2SEXP, SEXP tt1SEXP, SEXP gg1SEXP, SEXP LambdaSEXP, SEXP idSEXP, SEXP kvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type betascale(betascaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gSS(gSSSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< int >::type covnum(covnumSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xxx(xxxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type tt1(tt1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gg1(gg1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const int& >::type kv(kvSEXP);
    rcpp_result_gen = Rcpp::wrap(sandwich_kd_rcpp(rho, betascale, betainit, gSS, kk, covnum, K, n, new_uid, xxx, c1, t2, tt1, gg1, Lambda, id, kv));
    return rcpp_result_gen;
END_RCPP
}
// sandwich_toep_rcpp
SEXP sandwich_toep_rcpp(const NumericVector& rho, double betascale, const Eigen::Map<Eigen::VectorXd>& betainit, const Eigen::Map<Eigen::VectorXd>& gSS, int kk, int covnum, int K, const IntegerVector& n, const IntegerVector& new_uid, const Eigen::Map<Eigen::MatrixXd>& xxx, const NumericVector& c1, const Eigen::Map<Eigen::VectorXd>& t2, const Eigen::Map<Eigen::VectorXd>& tt1, const Eigen::Map<Eigen::VectorXd>& gg1, const Eigen::Map<Eigen::VectorXd>& Lambda, const IntegerVector& id);
RcppExport SEXP _marcox_sandwich_toep_rcpp(SEXP rhoSEXP, SEXP betascaleSEXP, SEXP betainitSEXP, SEXP gSSSEXP, SEXP kkSEXP, SEXP covnumSEXP, SEXP KSEXP, SEXP nSEXP, SEXP new_uidSEXP, SEXP xxxSEXP, SEXP c1SEXP, SEXP t2SEXP, SEXP tt1SEXP, SEXP gg1SEXP, SEXP LambdaSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type betascale(betascaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gSS(gSSSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< int >::type covnum(covnumSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xxx(xxxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type tt1(tt1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gg1(gg1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sandwich_toep_rcpp(rho, betascale, betainit, gSS, kk, covnum, K, n, new_uid, xxx, c1, t2, tt1, gg1, Lambda, id));
    return rcpp_result_gen;
END_RCPP
}
// sandwich_uns_rcpp
SEXP sandwich_uns_rcpp(const Eigen::Map<Eigen::MatrixXd>& rho, double betascale, const Eigen::Map<Eigen::VectorXd>& betainit, const Eigen::Map<Eigen::VectorXd>& gSS, int kk, int covnum, int K, const IntegerVector& n, const IntegerVector& new_uid, const Eigen::Map<Eigen::MatrixXd>& xxx, const NumericVector& c1, const Eigen::Map<Eigen::VectorXd>& t2, const Eigen::Map<Eigen::VectorXd>& tt1, const Eigen::Map<Eigen::VectorXd>& gg1, const Eigen::Map<Eigen::VectorXd>& Lambda, const IntegerVector& id);
RcppExport SEXP _marcox_sandwich_uns_rcpp(SEXP rhoSEXP, SEXP betascaleSEXP, SEXP betainitSEXP, SEXP gSSSEXP, SEXP kkSEXP, SEXP covnumSEXP, SEXP KSEXP, SEXP nSEXP, SEXP new_uidSEXP, SEXP xxxSEXP, SEXP c1SEXP, SEXP t2SEXP, SEXP tt1SEXP, SEXP gg1SEXP, SEXP LambdaSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type betascale(betascaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gSS(gSSSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< int >::type covnum(covnumSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type new_uid(new_uidSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xxx(xxxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type tt1(tt1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gg1(gg1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sandwich_uns_rcpp(rho, betascale, betainit, gSS, kk, covnum, K, n, new_uid, xxx, c1, t2, tt1, gg1, Lambda, id));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_marcox_marcox_iter_ar1Cpp", (DL_FUNC) &_marcox_marcox_iter_ar1Cpp, 13},
    {"_marcox_marcox_iter_excCpp", (DL_FUNC) &_marcox_marcox_iter_excCpp, 13},
    {"_marcox_marcox_iter_indpCpp", (DL_FUNC) &_marcox_marcox_iter_indpCpp, 13},
    {"_marcox_marcox_iter_kdCpp", (DL_FUNC) &_marcox_marcox_iter_kdCpp, 14},
    {"_marcox_marcox_iter_toepCpp", (DL_FUNC) &_marcox_marcox_iter_toepCpp, 13},
    {"_marcox_marcox_iter_unsCpp", (DL_FUNC) &_marcox_marcox_iter_unsCpp, 13},
    {"_marcox_matSolCpp", (DL_FUNC) &_marcox_matSolCpp, 5},
    {"_marcox_sandwich_ar1_rcpp", (DL_FUNC) &_marcox_sandwich_ar1_rcpp, 16},
    {"_marcox_sandwich_exc_rcpp", (DL_FUNC) &_marcox_sandwich_exc_rcpp, 16},
    {"_marcox_sandwich_indp_rcpp", (DL_FUNC) &_marcox_sandwich_indp_rcpp, 16},
    {"_marcox_sandwich_kd_rcpp", (DL_FUNC) &_marcox_sandwich_kd_rcpp, 17},
    {"_marcox_sandwich_toep_rcpp", (DL_FUNC) &_marcox_sandwich_toep_rcpp, 16},
    {"_marcox_sandwich_uns_rcpp", (DL_FUNC) &_marcox_sandwich_uns_rcpp, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_marcox(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
