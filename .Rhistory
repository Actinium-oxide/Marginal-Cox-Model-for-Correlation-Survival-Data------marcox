mu22=mu2[id==i,]
#   mu22m=diag(mu22)
mu22m=diag(mu22,n[i],n[i])
G2=diag(g11)
c22=c2[id==i]
C2=(c22/g11)-mu22
Q1=matrix(betacorr,n[i],n[i])
diag(Q1)=1
fdv=t(mu22m%*%z22)%*%solve(sqrt(mu22m)%*%Q1%*%sqrt(mu22m)*(betascale))%*%G2%*%C2
t22=t2[id==i]
#  d11=rep(0,(kk))
#  for(s in 1:(kk))
# {
#    d11[s]=sum(exp(xxx1[(c111==1)&(t21==tt1[s]),]%*%be)/(1-exp(-gS[s]*exp(xxx1[(c111==1)&(t21==tt1[s]),]%*%be))))-
#    sum(gg11[t21>=tt1[s]]*exp(xxx1[t21>=tt1[s],]%*%be))
#  }
eqalpha=rep(0,kk)
for(j in 1:kk)
{
Aalpha=(1:n[i])[(t22==tt1[j])&(c111==1)]
Balpha=(1:n[i])[t22>=tt1[j]]
if(length(Balpha)==0)
{  eqalpha[j]<-0  }
if(length(Balpha)!=0 & length(Aalpha)==0)
{  eqalpha[j]<- -sum(gg11[Balpha]*mu22[Balpha]) }
else
eqalpha[j]<-sum(mu22[Aalpha]/(1-exp(-gS[j]*mu22[Aalpha])))-sum(gg11[Balpha]*mu22[Balpha])
}
#   fdm=fdm+t(t(c(fdv,d11)))%*%t(c(fdv,d11))
fdm=fdm+t(t(c(fdv,eqalpha)))%*%t(c(fdv,eqalpha))
}
vcmR=solve(M)%*%fdm%*%t(solve(M))
V1=diag(vcmR)[1:dim(xxx)[2]]
V2=(diag(solve(M)))[1:dim(xxx)[2]]
sandv=V1
naivv=V2
sqrt(sandv)
coxph(Surv(time,cens)~age+sex+T1+T2+T3,data=cluster2)
marcox(Surv(time,cens)~age+type+sex,dat=init(kidney_data,div=2,dummy=dum(c('type'),list(c(0,1,2)))))
coxph(Surv(time,cens)~age+sex+T1+T2+T3+cluster(id),data=cluster2,)
coxph(Surv(time,cens)~age+sex+type_1+type_2+type_3+cluster(id),data=cluster2,)
tempdir <- function() '/temp'
unlockBinding("tempdir", baseenv())
utils::assignInNamespace("tempdir", tempdir, ns="base", envir=baseenv())
assign("tempdir", tempdir, baseenv())
lockBinding("tempdir", baseenv())
marcox(formula = Surv(time, cens) ~ sex, dat =init('D:/kidney.txt', div=2, dummy=dum(c('type'),list(c(0,1,2)))))
Sys.setenv(CXXFLAGS = "-Wno-unused -Wno-templates")
options(warn = -1)
factor()
factor()
factor(56)
marcox(Surv(time,cens)~age+type+sex,dat=init(kidney_data,div=2,dummy=dum(c('type'),list(c(0,1,2)))))
marcox(Surv(time,cens)~age+type+sex,dat=init(kidney_data,div=2,dummy=dum(c('type'),list(c(0,1,2)))))
marcox(Surv(time,cens)~age+type+sex,dat=init(kidney_data,div=2,dummy=dum(c('type'),list(c(0,1,2)))))
marcox(Surv(time,cens)~age+type+sex,dat=init(kidney_data,div=2,dummy=factor(c('type'),list(c(0,1,2)))))
marcox(Surv(time,cens)~age+type+sex,dat=init(kidney_data,div=2,dummy=factor(c('type'),list(c(0,1,2)))))
typename
table(typename[1])
(typename[1])
table(cluster2[,typename[1]])
table(cluster2[,typename[1]])->qq
qq
qq[1]
qq[1][2]
qq[1][1]
qq[[1]]
qq[[0]]
qq[[2]]
qq[1]
qq[1][0]
qq[1][1]
typeof(11)
typeof(qq)
colname(qq)
colnames(qq)
names(11)
names(qq)
length(names(qq))
factor(type)
factor(as.character(type))
cluster12
cluster2
cluster2[,type]
cluster2[,'type']
cluster2[,as.character(type)]
as.character(type)
tyoebane
typename
cluster2$typename
cluster2$typename[1]
cluster2$(typename[1])
typename
cluster2[,typename[1]]
factor(type)
factor('type')
cluster2
factor('type')
factor('type')
lp
dv
length(dv)
length(dv[[1]])
dv-0
dv_0
cluster2
factor('type')
cluster2=kidney_data
factor('type')
clister2
cluster2
factor('type')
dv_0
dv_1
dv
factor('type')
factor('type')
factor('type')
dv
factor('type')
dv_0
dv_0[1]
dv_0[2]
factor('type')
cluster2=kidney_data
factor('type')
dv
dv_1
dv_0
factor
factor('type')
cluster2
cluster2
factor('type')
cluster2
dv
cluster2=kidney_data
factor('type')
dv
length(dv_0)
factor('type')
dv
for (i in 4:6){}
[print(i)]
for (i in 4:6){print(i)}
factor('type')
clusterkidney_data
cluster=kidney_data
factor('type')
dav
dv
dv
cluster2=kidney_data
factor('type')
dv
dv_0
dv_2
dv_1
factor('type')
dv
lp
cluster2
cluster2=kidney_data
factor('type')
cluster2
lp
lp_or
cluster2=kidney_data
factor(type)
factor('tyupe')
factor('type')
cluster2
lp
lp_or
cluster2=kidney_data
factor('type')
lp_or
length(dv)
dv
colnames(cluster2[,6:8])
oo=Surv(time,cens)~age+factor(sex)
oo
oo[[2]]
oo[[3]]
oo[[3]][[2]]
oo[[3]][[3]]
eval(parse(as.character(oo[[3]][[3]])))
as.character(oo[[3]][[3]]))
as.character(oo[[3]][[3]])
eval(parse((oo[[3]][[3]])))
oo[[3]][[3]]
eval(parse(daparse(oo[[3]][[3]])))
eval(parse(deparse(oo[[3]][[3]])))
factor(sex)
oo=Surv(time,cens)~age+factor('type')
eval(parse(deparse(oo[[3]][[3]])))
oo[[3]][[3]][[3]]
oo[[3]][[3]]
oo[[3]][[3]][1]
oo[[3]][[3]][2]
oo[[3]][[3]][3]
oo[[3]][[3]][1]
eval(oo[[3]][[3]])
cluster2
cluster2=kidney_data
eval(oo[[3]][[3]])
eval(oo[[3]][[3]])
col_num
init(kidney_data,div=2)
eval(oo[[3]][[3]])
cluster2
l
lp
lp_or
dv
eval(oo[[3]][[3]])
cluster2
eval(oo[[3]][[3]])
oo
grepl(deparse(oo[[3]][[3]])),'factor)'
grepl(deparse(oo[[3]][[3]])),'factor')
grepl(deparse(oo[[3]][[3]]),'factor')
deparse(oo[[3]][[3]])
parse(oo[[3]][[3]])
grepl('factor',deparse(oo[[3]][[3]]))
oo
oo[[2]]
oo[[3]]
strsplit(deparse(oo[[3]]),'\\+')[[1]]
strsplit(deparse(oo[[3]]),'\\+')[[1]]->index
index
index[1]
index[2]
for (i in 1:length(index)){index[i]<<-gsub(' ','',index[i])}
index
for (i in 1:length(index)){index[i]<<-gsub(' ','',index[i])}
length(index)
for (i in 1:length(index)){index[i]<-gsub(' ','',index[i])}
index
parse(index[2])
eval(index[2])
deparse(factor(ty))
deparse(factor('sex'))
deparse(oo[[3]][[3]])
eval(parse(text=index))
index
eval(parse(text=index[2]))
eval(parse(index[2]))
oo
marcox(formula=oo,dat=init(kidney_data,div=2))
coxph(Surv(time,cens)~age,data=cluster2)
oo[[3]][[3]][2]
daparse(oo[[3]][[3]][2])
deparse(oo[[3]][[3]][2])
list(c(1,2),c(9,0))
list(c(1,2),c(9,0))[[1]]
list(c(1,2),c(9,0))[[1]][2]
factor
factorial
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
cov_temp
typelist
index
grepl('factor',index[3]==TRUE
)
index[3]
grepl('fac',index[3])
grepl('factor',index[3])
grepl('factor',index[3])==TRUE
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
typelist
cov_temp
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
typelist
grepl('factor',index[j])==TRUE
grepl('factor',index[3])==TRUE
index
grepl('factor',index[3])==TRUE
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
rownames(result)
rownames(result)=c(rownames(result),c(9,1,1,1,1,1,1))
rownames(result)=c(rownames(result),c(9,1,1))
rownames(result)=c(rownames(result),c(9,1,1))
result
cluster2
xxx
cluster2[,(lp_or+1):(lp_or+length(dv))]
xxx_1
xxx1
xxx_1
typelist
typedumlist
typedumlist[[1]]
tm_1
eval(parse(text=j))[[1]]
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
xxx
xxx_2
typeof(xxx_2)
as.vector(xxx_2)
as.matrix(xxx_2)
factor('type')
factor('type')[[2]]
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
x111
xxx_2
xxx_1
unlist(xxx_2)
xxx_2[[1]]
xxx_2[[2]]
length(xxx_2)
xxx_21=xxx_2
xxx_2=c()
for (i in 1:length(xxx_21)){
xxx_2<<-cbind(xxx_2,xxx_21[[i]])
}
xxx_2
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
xxx
xxx_1
x111
result
rownames(result)
typedumlist
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
rownames(result)
rownames(result)
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(ad=kidney_data,div=2))
base
f2<-function(x1,y1)
{
sum((x1*lambda[2]*exp(b1*xxx))^(-1)*(1-exp(-lambda[2]*exp(b1*xxx)*x1)))-y1*K*n
}
f2
uniroot(f2,c(0.01,10),y1=0.5)
lambda=c(1,2)
uniroot(f2,c(0.01,10),y1=0.5)
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 0.3)
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 0.3)
mean(censoringrates)
censoringrates
sum(c1==0)/length(c1)
datasets
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 0.3)
datasets
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 0.3)
datasest
datasets
cr=uniroot(f2, c(0.01,10),y1=censrate)$root
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 0.3)
cr
####  generate datasets and store them  ####
####  the baseline follows weibull distribution if lambda=c(2,2)  OR  exponential distribution if lambda=c(1,2)####
###  c1[(1:400)[t2==max(t2[zzz==0])]] this one is to see the max time is censored or not in control group ###
###  c1[(1:400)[t2==max(t2[zzz==1])]] this one is to see the max time is censored or not in treatment group ###
###  if the max time is not censored, we need force it to be censored. ####
###  That is c1[(1:400)[t2==max(t2[zzz==0])]]=0 or c1[(1:400)[t2==max(t2[zzz==1])]]=0 and  cluster2$cens<-c1 ###
library(survival)
datasets<-list()
pdf("C:/data/1st dataset/PH model/graph((200,2)phdw,8,50).pdf")
####  generate datasets and store them  ####
####  the baseline follows weibull distribution if lambda=c(2,2)  OR  exponential distribution if lambda=c(1,2)####
###  c1[(1:400)[t2==max(t2[zzz==0])]] this one is to see the max time is censored or not in control group ###
###  c1[(1:400)[t2==max(t2[zzz==1])]] this one is to see the max time is censored or not in treatment group ###
###  if the max time is not censored, we need force it to be censored. ####
###  That is c1[(1:400)[t2==max(t2[zzz==0])]]=0 or c1[(1:400)[t2==max(t2[zzz==1])]]=0 and  cluster2$cens<-c1 ###
library(survival)
datasets<-list()
censoringrates=rep(0,1000)
for(lll in 1:1000)
{
K=200
n=2
lambda=c(1,2)
b1=log(2)
theta=8
tt=matrix(0,K,n)
x2=matrix(0,K,n)
for(i in 1:K)
{      u=runif(n)
x=rbinom(n,1,0.5)
x2[i,]=x
a=rep(0,n-1)
tt[i,1]=(1/lambda[2])*(-exp(-b1*x[1])*log(1-u[1]))^(1/lambda[1])
for(m in 2:n)
{
a[m-1]=exp(theta*(lambda[2]*tt[i,m-1])^(lambda[1])*exp(b1*x[m-1]))
tt[i,m]=(1/lambda[2])*((theta^(-1))*log((m-1)-sum(a)+(sum(a)-(m-2))*(1-u[m])^(-(theta^(-1)+m-1)^(-1)))*exp(-b1*x[m]))^((lambda[1])^(-1))
}
}
xxx=as.vector(t(x2))
f2<-function(x1,y1)
{
sum(  (x1*lambda[2]*exp(b1*xxx))^(-1)*(1-exp(-lambda[2]*exp(b1*xxx)*x1))  )-y1*K*n
}
cr=uniroot(f2, c(0.01,10),y1=0.5)$root
censor=runif(K*n,0,cr)
# censor=runif(K*n,0,2)
c1=rep(0,K*n)
t2=rep(0,K*n)
t1=as.vector(t(tt))
for(i in 1:(K*n))
{
if (t1[i]>censor[i])
{ c1[i]=0
t2[i]=censor[i]
}
else
{ c1[i]=1
t2[i]=t1[i]
}
}
#xxx=as.vector(t(x2))
id=rep((1:K),each=n)
cluster1 <- data.frame(cens = c1, xxx,  id, time=t2)
plot(survfit(Surv(time, cens)~ xxx, data = cluster1),lty=1:2)
mtext(bquote( .(lll)))
datasets[[lll]]<-cluster1
censoringrates[lll]=sum(c1==0)/length(c1)
}
dev.off()
save(datasets, file = "C:/Users/yiniu/Desktop/科研/Paper QIF/LDA revision/simulation data/ datasets((200,2)phdw,8,50).RData")
datasets
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 2)
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 0.8)
datasets
dde(10,100,2,c(1,2),b1=log(2),theta=6,censrate = 0.8)
datasets
dde(10,100,2,c(1,7),b1=log(2),theta=20,censrate = 0.8)
datasets
dde(10,100,2,c(1,7),b1=0.00001,theta=20,censrate = 0.8)
datasets
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
datasets
cr
mean(censoringrates)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
result_dde
colnames(result_dde)=c('censoringrates','mean(censoringrates)')
result_dde
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
coxph(Surv(time,cens)~age,data=kidney_data)
marcox(Surv(time,cens)~age+factor(type),dat=init(kidney_data,div=2))
marcox(Surv(time,cens)~age+factor('type'),dat=init(kidney_data,div=2))
coxph(Surv(time,cens)~age,data=kidney_data)
marcox(Surv(time,cens)~age,dat=init(kidney_data,div=2))
coxph(Surv(time,cens)~age,robust=cluster,data=kidney_data)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
list(c(0,1),c(9,0))
names(list(c(0,1),c(9,0)))
names(list(c(0,1),c(9,0)))=c(1,2)
names(list(c(0,1),c(9,0)))=c('1','2')
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
dde(10,100,2,c(1,2),b1=log(8),theta=2,censrate = 0.8)
dde()
dde(result_data_length = 20)
dde(result_data_length = 20)
dde(result_data_length = 20)
dde(result_data_length = 20)
?dde
result_dde
result_dde[['data']]
result_dde[[data]]
names(result_dde)
names(result_dde)<<-c('data','censoringrates','mean(censoringrates)')
?dde
dde(censrate = 0.5)
dde(censrate = 0.1)
dde(censrate = 0.2)
dde(censrate = 0.3)
dde(censrate = 0.4)
dde(censrate = 0.5)
?dde
?init
?init
?init
?init
?init
cluster2
factor('type',dv=c(0,1,2))
factor('type',d_v=c(0,1,2))
diabetes
diabetes_initialize()
diabetes_initialize()
diabetes_init
diabetes=diabetes_init
diabetes
usethis::use_data(diabetes)
usethis::use_data(diabetes,overwrite = TRUE)
diabetes
data(diabetes)
diabetes
diabetes
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(kidney_data,div=2))
coxph(Surv(time,cens)~sex,data=cluster2)
library(marcox)
init(kidney_data,div=2)
source("D:/Program Files/资料/大创/m/pkg/marcox/R/marcox.R")
factor(kidney_data)
init(kidney_data,div=2)
factor('type')
cluster2
marcox(Surv(time,cens)~age+sex+factor('type'),dat=init(kidney_data,div=2))
dde()
dde(result_data_length = 20)
install.pacages
